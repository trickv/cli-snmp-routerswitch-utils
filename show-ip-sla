#!/usr/bin/env python

import sys
# I think this is for older pysnmp where v4 is beta:
# from pysnmp.v4.entity.rfc3413.oneliner import cmdgen
from pysnmp.entity.rfc3413.oneliner import cmdgen

if len(sys.argv) != 2 or sys.argv[1] == '-h' or sys.argv[1] == '--help':
    print "Usage: %s <host>"
    sys.exit(1)

def format_octet_string_as_ip(octet_string):
    output = ""
    for number in octet_string.asNumbers():
        if len(output) > 0:
            output += '.'
        output += str(number)
    return output

# Hardcoded MIB values from CISCO-RTTMON-MIB below.
# TODO: figure out how to translate this MIB into a .py file.
# See for example: /usr/lib/python2.6/site-packages/pysnmp/smi/mibs/SNMPv2-MIB.py
### PySNMP SMI module. Autogenerated from smidump -f python SNMPv2-MIB
### by libsmi2pysnmp-0.1.3 at Tue Apr  3 16:55:45 2012,

datatypes = {
    'Status': {
        1: 'active',
        2: 'notInService',
    },
    'Protocol': {
        1: 'notApplicable',
        2: 'ipIcmpEcho',
    },
    'Oper State': {
        5: 'inactive',
        6: 'active',
    },
    'Oper Sense': {
        0: 'inactive',
        1: 'ok',
        4: 'timeout',
    }
}

hostname = sys.argv[1]

# 1.3.6.1.4.1.9.9.42.1.2 is the CISCO-RTTMON-MIB::rttMonCtrl table
# 1.3.6.1.4.1.9.9.42.1.2.1.1.2.2 probe 2 owner

def snmp_walk(oid):
    print("Running SNMP walk on %s" % oid)
    cmdGen = cmdgen.CommandGenerator()
    errorIndication, errorStatus, errorIndex, result = cmdGen.nextCmd(
        cmdgen.CommunityData('foo', 'public'),
        cmdgen.UdpTransportTarget((hostname, 161)),
        oid
    )
    if errorIndication or errorStatus:
        raise Exception("SNMP Error: %s, %s" % (errorIndication, errorStatus))
    return result

base_oid = '1.3.6.1.4.1.9.9.42.1.2'

fields = [
    ("Owner", "%10s", "1.1.2"),
    ("Tag", "%30s", "1.1.3"),
    ("Status", "%13s", "1.1.9"),
    ("Protocol", "%12s", "2.1.1"),
    ("Freq", "%5s", "1.1.6"),
    ("Target", "%16s", "2.1.2"),
    ("Source", "%16s", "2.1.6"),
    ("Oper State", "%15s", "9.1.10"),
    ("Oper Sense", "%15s", "10.1.2"),
    ("Oper Time", "%15s", "10.1.1"),
]

result = snmp_walk(base_oid + '.1.1.2') # Owner
sla_count = len(result)

print ("SLAs: %d" % sla_count)

slas = []
slas.append("ID: ")

for name, format_string, oid in fields:
    slas[0] += format_string % name

for sla_id in range(1, sla_count + 1):
    slas.append("%2d: " % sla_id)

for field, format_string, suboid in fields:
    target_oid = "%s.%s" % (base_oid, suboid)
    result = snmp_walk(target_oid)
    sla_id = 0
    for value in result:
        if datatypes.has_key(field) and datatypes[field].has_key(value[0][1]):
            my_value = datatypes[field][value[0][1]]
        else:
            my_value = value[0][1]
        sla_id += 1
        if field == "Target" or field == "Source":
            my_value = format_octet_string_as_ip(my_value)
        if field == "Oper Time":
            print(dir(my_value))
            print(my_value.getTagSet())
        slas[sla_id] += format_string % my_value


for row in slas:
    print row

sys.exit(42)

import pprint

x = 0
for row in result:
    x += 1
    if x > 5:
        break
    print(dir(row))
    for name, val in row:
        pprint.pprint(name)
        pprint.pprint(val)
        print('%s = %s' % (name.prettyPrint(), val.prettyPrint()))
print len(result)

pprint.pprint(result[0][0])
sys.exit(42)

operational_status_id = result[0][1]
type = result[1][1]
alias = result[2][1]
name = result[3][1]

if operational_status_id == '':
    raise Exception("Requested interface id %d does not exist, or we don't have permissions to view it." % interface_id)

operational_status = operational_statuses[operational_status_id]
check_status = 'OK' if operational_status == expected_state else 'CRITICAL'

print "Interface '%s' %s: %s%s" % (
    name,
    check_status,
    operational_status,
    " (%s)" % alias if len(alias) > 0 else '',
    )

if debug:
    for name, val in result:
        print('%s = %s' % (name.prettyPrint(), val.prettyPrint()))

